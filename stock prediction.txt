import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
import yfinance as yf
from tensorflow import keras
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
import ipywidgets as widgets
from IPython.display import display

# Function to create sequences for training
def create_sequences(data, seq_length):
    sequences, targets = [], []
    for i in range(len(data) - seq_length):
        sequence = data[i:i + seq_length]
        target = data[i + seq_length]
        sequences.append(sequence)
        targets.append(target)
    return np.array(sequences), np.array(targets)

# Function to fetch and plot stock data
def fetch_and_plot_stock(b):
    # Fetch stock data (e.g., Apple Inc.)
    ticker = ticker_input.value
    start_date = start_date_input.value
    end_date = end_date_input.value
    data = yf.download(ticker, start=start_date, end=end_date)

    # Extract the 'Close' prices for training
    data = data['Close'].values.reshape(-1, 1)

    # Normalize the data
    scaler = MinMaxScaler()
    data = scaler.fit_transform(data)

    # Split data into training and testing sets
    train_size = int(len(data) * 0.8)
    train_data, test_data = data[:train_size], data[train_size:]

    # Create sequences for training
    train_sequences, train_targets = create_sequences(train_data, seq_length)
    test_sequences, test_targets = create_sequences(test_data, seq_length)

    # Build an LSTM model
    model = Sequential()
    model.add(LSTM(50, activation='relu', input_shape=(seq_length, 1)))
    model.add(Dense(1))
    model.compile(optimizer='adam', loss='mse')

    # Train the model without printing epochs
    model.fit(train_sequences, train_targets, epochs=100, batch_size=64, verbose=0)

    # Make predictions
    test_predictions = model.predict(test_sequences)

    # Inverse transform the predictions
    test_predictions = scaler.inverse_transform(test_predictions)

    # Plot the actual vs. predicted stock prices
    plt.figure(figsize=(12, 6))
    plt.plot(data[train_size + seq_length:], label='Actual Stock Price', color='blue')
    plt.plot(test_predictions, label='Predicted Stock Price', color='red')
    plt.title('Stock Price Prediction')
    plt.xlabel('Time')
    plt.ylabel('Stock Price')
    plt.legend()
    plt.show()

# Create input widgets
ticker_input = widgets.Text(value='AAPL', description='Stock Ticker Symbol:')
start_date_input = widgets.Text(value='2010-01-01', description='Start Date:')
end_date_input = widgets.Text(value='2022-01-01', description='End Date:')
plot_button = widgets.Button(description='Plot Stock Data')

# Define widget event handlers
plot_button.on_click(fetch_and_plot_stock)

# Display the widgets
display(ticker_input, start_date_input, end_date_input, plot_button)

# Set the sequence length
seq_length = 10
